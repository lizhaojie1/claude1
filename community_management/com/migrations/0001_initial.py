# Generated by Django 2.0 on 2023-04-09 18:44

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.SmallIntegerField(choices=[(1, '用户'), (2, '管理员')], default=1, verbose_name='用户类型')),
                ('telephone', models.CharField(blank=True, max_length=11, null=True, verbose_name='手机号码')),
                ('avatar', models.ImageField(default='avatar/avatar.jpg', upload_to='avatar', verbose_name='头像图片')),
                ('addr', models.TextField(blank=True, null=True, verbose_name='学生来源')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
                'db_table': 'com_userinfo',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Active',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活，用作用户操作')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.BooleanField(default=False, verbose_name='是否删除，用作管理员操作')),
                ('name', models.CharField(blank=True, max_length=64, null=True, verbose_name='活动名称')),
                ('desc', models.TextField(blank=True, max_length=64, null=True, verbose_name='活动介绍')),
            ],
            options={
                'verbose_name': '活动',
                'verbose_name_plural': '活动',
                'db_table': 'com_active',
            },
        ),
        migrations.CreateModel(
            name='Apply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活，用作用户操作')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.BooleanField(default=False, verbose_name='是否删除，用作管理员操作')),
                ('apply_type', models.SmallIntegerField(choices=[(1, '未处理'), (2, '同意'), (3, '拒绝'), (4, '剔除')], default=1, verbose_name='进度')),
            ],
            options={
                'verbose_name': '申请记录',
                'verbose_name_plural': '申请记录',
                'db_table': 'com_apply',
            },
        ),
        migrations.CreateModel(
            name='Com_Shelf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活，用作用户操作')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.BooleanField(default=False, verbose_name='是否删除，用作管理员操作')),
                ('is_start', models.BooleanField(default=False, verbose_name='收藏字段')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活，用作用户操作')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.BooleanField(default=False, verbose_name='是否删除，用作管理员操作')),
                ('comment', models.CharField(blank=True, max_length=225, null=True, verbose_name='评论内容')),
                ('depth', models.PositiveIntegerField(default=1, verbose_name='评论深度')),
                ('root', models.PositiveIntegerField(blank=True, null=True, verbose_name='父id')),
            ],
            options={
                'db_table': 'com_comment',
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活，用作用户操作')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.BooleanField(default=False, verbose_name='是否删除，用作管理员操作')),
                ('name', models.CharField(blank=True, max_length=225, null=True, verbose_name='社团名称')),
                ('com_img', models.ImageField(default='com/com.jpg', upload_to='com', verbose_name='社团图片')),
                ('desc', models.TextField(blank=True, null=True, verbose_name='更多介绍')),
                ('hot', models.FloatField(default=0.00528, verbose_name='热度')),
            ],
            options={
                'verbose_name': '社团',
                'verbose_name_plural': '社团',
                'db_table': 'com_community',
            },
        ),
        migrations.CreateModel(
            name='Community_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活，用作用户操作')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_delete', models.BooleanField(default=False, verbose_name='是否删除，用作管理员操作')),
                ('name', models.CharField(max_length=64, verbose_name='分类名称')),
            ],
            options={
                'verbose_name': '社团分类',
                'verbose_name_plural': '社团分类',
                'db_table': 'com_community_type',
            },
        ),
        migrations.AddField(
            model_name='community',
            name='community_type',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='c_ct', to='com.Community_Type', verbose_name='社团类型'),
        ),
        migrations.AddField(
            model_name='comment',
            name='community',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='c_b', to='com.Community', verbose_name='社团'),
        ),
        migrations.AddField(
            model_name='comment',
            name='reply',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='comment_reply', to='com.Comment', verbose_name='父评论'),
        ),
        migrations.AddField(
            model_name='comment',
            name='userinfo',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='comment_userinfo', to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='com_shelf',
            name='community',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='cs_c', to='com.Community', verbose_name='社团'),
        ),
        migrations.AddField(
            model_name='com_shelf',
            name='userinfo',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='cs_u', to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='apply',
            name='community',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ap_c', to='com.Community', verbose_name='社团'),
        ),
        migrations.AddField(
            model_name='apply',
            name='userinfo',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ap_u', to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AddField(
            model_name='active',
            name='community',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='act_c', to='com.Community', verbose_name='社团'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='community',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='u_com', to='com.Community', verbose_name='社团'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
